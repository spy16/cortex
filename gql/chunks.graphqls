scalar Time

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

schema {
    query: ChunkQuery
    mutation: ChunkMutation
}

type ChunkQuery {
    """
    Fetch chunk by its identifier.
    """
    chunk(id: String!): Chunk!
}

type ChunkMutation {
    "Creates a new chunk based on the given input."
    createChunk(req: CreateRequest!): Chunk

    "Update the content, content-type, etc. of a chunk."
    updateChunk(id: String!, req: UpdateRequest!): Chunk

    "Deletes a chunk by its identifier. All children will be deleted."
    deleteChunk(id: String!): Chunk
}

"Kind represents the type of data in a chunk."
enum Kind {
    NOTE,
    IMAGE,
    TODO,
}

"Chunk represents a piece of information."
type Chunk {
    id: String!
    kind: String!
    rank: String!
    data: String!
    tags: [String!]
    author_id: String!
    parent_id: String
    created_at: Time!
    updated_at: Time!
}

"""
UpdateRequest can be passed to updateChunk mutation to modify a chunk.
"""
input UpdateRequest {
    kind: String
    data: String
    rank: String
    tags: [String!]
    parent: String
}

"""
CreateRequest can be passed to createChunk mutation to create a new chunk.
"""
input CreateRequest {
    kind: Kind!
    data: String!
    rank: String
    tags: [String!]
    author_id: String!
    parent_id: String
}
