// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

// Chunk represents a piece of information.
type Chunk struct {
	ID          string      `json:"id"`
	AuthorID    string      `json:"author_id"`
	Author      *User       `json:"author"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
	Parent      *string     `json:"parent"`
	NextSibling *string     `json:"next_sibling"`
	PrevSibling *string     `json:"prev_sibling"`
	Content     string      `json:"content"`
	ContentType ContentType `json:"content_type"`
	Children    []*Chunk    `json:"children"`
}

type CreateRequest struct {
	ID          string       `json:"id"`
	Content     string       `json:"content"`
	AuthorID    string       `json:"author_id"`
	ContentType *ContentType `json:"content_type"`
	ParentID    *string      `json:"parent_id"`
	PrevSibling *string      `json:"prev_sibling"`
}

type UpdateRequest struct {
	Content     *string      `json:"content"`
	ContentType *ContentType `json:"content_type"`
	ParentID    *string      `json:"parent_id"`
	PrevSibling *string      `json:"prev_sibling"`
}

type User struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type UserRegistrationRequest struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type ContentType string

const (
	ContentTypeText ContentType = "TEXT"
	ContentTypeLink ContentType = "LINK"
)

var AllContentType = []ContentType{
	ContentTypeText,
	ContentTypeLink,
}

func (e ContentType) IsValid() bool {
	switch e {
	case ContentTypeText, ContentTypeLink:
		return true
	}
	return false
}

func (e ContentType) String() string {
	return string(e)
}

func (e *ContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentType", str)
	}
	return nil
}

func (e ContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
