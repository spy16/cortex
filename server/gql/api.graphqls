scalar Time

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

schema {
    query: Query
    mutation: Mutation
}

type Query {
    "Fetch chunk by its identifier."
    chunk(id: String!): Chunk!

    "Fetch user by identifier."
    user(id: String!): User!
}

type Mutation {
    "Register a new user."
    registerUser(req: RegisterUserRequest): User!

    "Creates a new chunk based on the given input."
    createChunk(req: CreateRequest!): Chunk!

    "Update the content, content-type, etc. of a chunk."
    updateChunk(id: String!, req: UpdateRequest!): Chunk!

    "Deletes a chunk by its identifier. All children will be deleted."
    deleteChunk(id: String!): Chunk!
}

"Kind represents the type of data in a chunk."
enum Kind {
    NOTE,
    TODO,
    IMAGE,
}

"User represents an entity that interacts with the system."
type User {
    id: String!
    name: String!
    email: String!
    created_at: Time!
    updated_at: Time!
}

"Chunk represents a piece of information."
type Chunk {
    id: String!
    kind: String!
    data: String!
    tags: [String!]
    children: [Chunk!]! @goField(forceResolver: true)
    author_id: String!
    parent_id: String
    created_at: Time!
    updated_at: Time!
}

input UpdateRequest {
    tags: [String!]
    parent: String
}

input CreateRequest {
    kind: Kind!
    data: String!
    tags: [String!]
    parent_id: String
}

input RegisterUserRequest {
    id: String!
    name: String!
    email: String!
}