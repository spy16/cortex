// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

// Chunk represents a piece of information.
type Chunk struct {
	ID        string    `json:"id"`
	Kind      string    `json:"kind"`
	Data      string    `json:"data"`
	Tags      []string  `json:"tags"`
	Children  []*Chunk  `json:"children"`
	AuthorID  string    `json:"author_id"`
	ParentID  *string   `json:"parent_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type CreateRequest struct {
	Kind     Kind     `json:"kind"`
	Data     string   `json:"data"`
	Tags     []string `json:"tags"`
	ParentID *string  `json:"parent_id"`
}

type RegisterUserRequest struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

type UpdateRequest struct {
	Tags   []string `json:"tags"`
	Parent *string  `json:"parent"`
}

// User represents an entity that interacts with the system.
type User struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Kind represents the type of data in a chunk.
type Kind string

const (
	KindNote  Kind = "NOTE"
	KindTodo  Kind = "TODO"
	KindImage Kind = "IMAGE"
)

var AllKind = []Kind{
	KindNote,
	KindTodo,
	KindImage,
}

func (e Kind) IsValid() bool {
	switch e {
	case KindNote, KindTodo, KindImage:
		return true
	}
	return false
}

func (e Kind) String() string {
	return string(e)
}

func (e *Kind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Kind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Kind", str)
	}
	return nil
}

func (e Kind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
